package main.java.com.moneymind.database;

import java.sql.*;
import java.util.Properties;

/**
 * Singleton Database Manager for SQLite operations
 */
public class DatabaseManager {
    private static DatabaseManager instance;
    private Connection connection;
    private static final String DATABASE_URL = "jdbc:sqlite:data/moneymind.db";

    private DatabaseManager() {}

    public static synchronized DatabaseManager getInstance() {
        if (instance == null) {
            instance = new DatabaseManager();
        }
        return instance;
    }

    public Connection connect() throws SQLException {
        if (connection == null || connection.isClosed()) {
            try {
                // Create data directory if it doesn't exist
                java.io.File dataDir = new java.io.File("data");
                if (!dataDir.exists()) {
                    dataDir.mkdirs();
                }

                Properties props = new Properties();
                props.setProperty("foreign_keys", "true");
                connection = DriverManager.getConnection(DATABASE_URL, props);

                System.out.println("Connected to SQLite database: " + DATABASE_URL);
            } catch (SQLException e) {
                System.err.println("Error connecting to database: " + e.getMessage());
                throw e;
            }
        }
        return connection;
    }

    public void disconnect() {
        try {
            if (connection != null && !connection.isClosed()) {
                connection.close();
                System.out.println("Database connection closed.");
            }
        } catch (SQLException e) {
            System.err.println("Error closing database connection: " + e.getMessage());
        }
    }

    public Connection getConnection() throws SQLException {
        if (connection == null || connection.isClosed()) {
            connect();
        }
        return connection;
    }

    // Transaction management
    public void beginTransaction() throws SQLException {
        getConnection().setAutoCommit(false);
    }

    public void commitTransaction() throws SQLException {
        getConnection().commit();
        getConnection().setAutoCommit(true);
    }

    public void rollbackTransaction() throws SQLException {
        getConnection().rollback();
        getConnection().setAutoCommit(true);
    }

    // Utility methods
    public boolean tableExists(String tableName) throws SQLException {
        String sql = "SELECT name FROM sqlite_master WHERE type='table' AND name=?";
        try (PreparedStatement stmt = getConnection().prepareStatement(sql)) {
            stmt.setString(1, tableName);
            ResultSet rs = stmt.executeQuery();
            return rs.next();
        }
    }

    public void executeUpdate(String sql) throws SQLException {
        try (Statement stmt = getConnection().createStatement()) {
            stmt.executeUpdate(sql);
        }
    }

    public ResultSet executeQuery(String sql) throws SQLException {
        Statement stmt = getConnection().createStatement();
        return stmt.executeQuery(sql);
    }

    public PreparedStatement prepareStatement(String sql) throws SQLException {
        return getConnection().prepareStatement(sql);
    }

    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        return getConnection().prepareStatement(sql, autoGeneratedKeys);
    }

    // Database maintenance
    public void vacuum() throws SQLException {
        executeUpdate("VACUUM");
        System.out.println("Database vacuumed successfully.");
    }

    public void analyze() throws SQLException {
        executeUpdate("ANALYZE");
        System.out.println("Database analyzed successfully.");
    }

    public long getDatabaseSize() {
        java.io.File dbFile = new java.io.File("data/moneymind.db");
        return dbFile.exists() ? dbFile.length() : 0;
    }

    public String getDatabaseInfo() throws SQLException {
        StringBuilder info = new StringBuilder();
        info.append("Database: ").append(DATABASE_URL).append("\n");
        info.append("Size: ").append(getDatabaseSize()).append(" bytes\n");

        String versionSql = "SELECT sqlite_version()";
        try (PreparedStatement stmt = prepareStatement(versionSql)) {
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                info.append("SQLite Version: ").append(rs.getString(1)).append("\n");
            }
        }

        return info.toString();
    }
}
